spring.application.name=EventService

# Tomcat port for product-service
server.port=8169

#mongodb database properties
spring.data.mongodb.host=localhost
spring.data.mongodb.port=27169
spring.data.mongodb.database=event-service
spring.data.mongodb.username=admin
spring.data.mongodb.password=password
spring.data.mongodb.authentication-database=admin

booking.api.url=http://localhost:8069/api/booking
approval.api.url=http://localhost:8269/api/approval

springdoc.api-docs.path=/api-docs

springdoc.swagger-ui.path=/swagger-ui

#Resilience4j
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

# =========================  for booking =====================================
resilience4j.circuitbreaker.instances.booking.registerHealthIndicator=true
# sets buffer size for storing circuit breaker events
resilience4j.circuitbreaker.instances.booking.event-consumer-buffer-size=10
# Track calls based on number of calls made(alternative would time-based)
resilience4j.circuitbreaker.instances.booking.slidingWindowType=COUNT_BASED
# set the number to recent calls to check for success or failure
resilience4j.circuitbreaker.instances.booking.slidingWindowSize=10
# defines the failure rate
resilience4j.circuitbreaker.instances.booking.failureRateThreshold=50
# specifies how long the circuit stays in open state
resilience4j.circuitbreaker.instances.booking.waitDurationInOpenState=5s
# limits the number of test calls allowed when the circuit breaker is in the half-open state
resilience4j.circuitbreaker.instances.booking.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.booking.automaticTransitionFromOpenToHalfOpenEnabled=true

# set the timeout duration for the method executions wrapped with a TimeLimiter
resilience4j.timelimiter.instances.booking.timeout-duration=3s
# requires at least 5 calls to calculate failure rate and decide to transition to OPEN state
resilience4j.circuitbreaker.instances.booking.minimum-number-of-calls=5

# sets the maximum number of time failed call will be retired
resilience4j.retry.instances.booking.max-attempts=3

# defines how long to wait before re-trying a failed call
resilience4j.retry.instances.booking.wait-duration=2s

# =========================  for approval =====================================
resilience4j.circuitbreaker.instances.approval.registerHealthIndicator=true
# sets buffer size for storing circuit breaker events
resilience4j.circuitbreaker.instances.approval.event-consumer-buffer-size=10
# Track calls based on number of calls made(alternative would time-based)
resilience4j.circuitbreaker.instances.approval.slidingWindowType=COUNT_BASED
# set the number to recent calls to check for success or failure
resilience4j.circuitbreaker.instances.approval.slidingWindowSize=10
# defines the failure rate
resilience4j.circuitbreaker.instances.approval.failureRateThreshold=50
# specifies how long the circuit stays in open state
resilience4j.circuitbreaker.instances.approval.waitDurationInOpenState=5s
# limits the number of test calls allowed when the circuit breaker is in the half-open state
resilience4j.circuitbreaker.instances.approval.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.approval.automaticTransitionFromOpenToHalfOpenEnabled=true

# set the timeout duration for the method executions wrapped with a TimeLimiter
resilience4j.timelimiter.instances.approval.timeout-duration=3s
# requires at least 5 calls to calculate failure rate and decide to transition to OPEN state
resilience4j.circuitbreaker.instances.approval.minimum-number-of-calls=5

# sets the maximum number of time failed call will be retired
resilience4j.retry.instances.approval.max-attempts=3

# defines how long to wait before re-trying a failed call
resilience4j.retry.instances.approval.wait-duration=2s

#Kafka
#kafka Properties
spring.kafka.bootstrap-servers=host.docker.internal:9092
spring.kafka.consumer.group-id=notificationService
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.type.mapping=event:com.example.eventservice.event.BookingConfirmedEvent
spring.kafka.consumer.auto-offset-reset=earliest

#Mail Properties ==> Sign Up for SMTP Service (mailtrap.io)
spring.mail.host=sandbox.smtp.mailtrap.io
spring.mail.port=2525
spring.mail.username=aff4f4e265ce0d
spring.mail.password=3c5bc791fd92ea

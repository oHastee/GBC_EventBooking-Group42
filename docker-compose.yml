services:
  zookeeper:
    container_name: zookeeper
    hostname: zookeeper
    image: confluentinc/cp-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - spring


  broker:
    container_name: broker
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      # Unique identifier for the Kafka broker
      KAFKA_BROKER_ID: 1
      # Zookeeper connection string (hostname and port)
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # Map of listener names to security protocols
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      # List of listeners and their addresses for external and internal communication
      # Internal (Docker network): broker:29092
      # External (Host machine): localhost:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://host.docker.internal:9092
      # Replication factor for internal Kafka topics
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - spring


  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      # he put 8086 cause that was his next available port but my next available is 8089
      - "8089:8080"
    environment:
      KAFKA_CLUSTERS_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: broker:29092
      #KAFKA_CLUSTERS_SCHEMAREGISTRY: http://schema-registry:8070
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - spring


  user-service:
    image: user-service
    build:
      context: ./user-service
      dockerfile: ./Dockerfile
    container_name: user-service
    ports:
      - "7017:7017"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    restart: unless-stopped
    depends_on:
      - postgres-room
    networks:
      - spring


  room-service:
    image: room-service
    build:
      context: ./room-service
      dockerfile: ./Dockerfile
    container_name: room-service
    ports:
      - "7016:7016"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    restart: unless-stopped
    depends_on:
      - postgres-room
    networks:
      - spring


  booking-service:
    image: booking-service
    build:
      context: ./booking-service
      dockerfile: ./Dockerfile
    container_name: booking-service
    ports:
      - "7019:7019"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    restart: unless-stopped
    depends_on:
      - mongodb-gbc-booking
      - room-service
    networks:
      - spring


  event-service:
    image: event-service
    build:
      context: ./event-service
      dockerfile: ./Dockerfile
    container_name: event-service
    ports:
      - "7013:7013"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    restart: unless-stopped
    depends_on:
      - mongodb-gbc-event
      - booking-service
    networks:
      - spring


  approval-service:
    image: approval-service
    build:
      context: ./approval-service
      dockerfile: Dockerfile
    container_name: approval-service
    ports:
      - "7014:7014"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    restart: unless-stopped
    depends_on:
      - event-service
      - booking-service
      - mongodb-gbc-approval
    networks:
      - spring


  mongodb-gbc-event:
    image: mongo:latest
    ports:
      - "27117:27117"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./data/mongo/event:/data/db
    restart: unless-stopped
    command: [ "mongod", "--port", "27117" ]
    networks:
      - spring


  mongodb-gbc-approval:
    image: mongo:latest
    ports:
      - "27217:27217"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./data/mongo/approval:/data/db
    restart: unless-stopped
    command: [ "mongod", "--port", "27217" ]
    networks:
      - spring


  mongodb-gbc-booking:
    image: mongo:latest
    ports:
      - "27317:27317"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./data/mongo/booking:/data/db
    restart: unless-stopped
    command: [ "mongod", "--port", "27317" ]
    networks:
      - spring


  postgres-user:
    image: postgres:latest
    container_name: postgres-user
    ports:
      - "5445:5445"
    environment:
      PGPORT: 5445
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    volumes:
      - ./data/postgres/user:/var/lib/postgresql/data
      - ./init/user/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring


  postgres-room:
    image: postgres:latest
    container_name: postgres-room
    ports:
      - "5444:5444"
    environment:
      PGPORT: 5444
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    volumes:
      - ./data/postgres/room:/var/lib/postgresql/data
      - ./init/room/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring


  keycloak-gbc:
    container_name: keycloak-gbc
    hostname: keycloak-gbc
    image: quay.io/keycloak/keycloak:24.0.1
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: postgres
      DB_ADDR: postgres-keycloak-gbc
      DB_DATABASE: keycloak
      DB_USER: admin
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
      ROOT_LOGLEVEL: DEBUG
      JBOSS_LOG_MANAGER_ROOT_LOGGER: DEBUG, stdout, FILE
    ports:
      - "8080:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import
    depends_on:
      - postgres-keycloak-gbc
    networks:
      - spring


  postgres-keycloak-gbc:
    container_name: postgres-keycloak-gbc
    image: postgres:latest
    ports:
      - "5438:5438"
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
      - ./data/postgres/keycloak:/var/lib/postgresql/data
    networks:
      - spring


  api-gateway-gbc:
    image: api-gateway-gbc
    build:
      context: ./api-gateway
      dockerfile: ./Dockerfile
    container_name: api-gateway-gbc
    ports:
      - "9000:9000"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    restart: unless-stopped
    depends_on:
      - user-service
      - room-service
      - booking-service
      - event-service
      - approval-service
    networks:
      - spring


volumes:
  mongodb-gbc-event:
    driver: local
  mongodb-gbc-approval:
    driver: local
  mongodb-gbc-booking:
    driver: local
  postgres-room:
    driver: local
  postgres-user:
    driver: local
  keycloak-gbc:
    driver: local
  postgres-keycloak-gbc:
    driver: local


networks:
  spring:
    driver: bridge
